//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Security.Cryptography;
using System.Text;

public class Employee : DBConnection
{
    public List<Employee> employeeList; 

    private string firstName
	{
		get;
		set;
	}

	private string lastName
	{
		get;
		set;
	}

	private int employeeId
	{
		get;
		set;
	}

	private string passWord
	{
		get;
		set;
	}

	private string userName
	{
		get;
		set;
	}

    /*
	public virtual Login Login
	{
		get;
		set;
	}*/

    public Employee()
    {

    }

	public Employee(string fn, string ln, string employeeCode, string pasword)
	{
 

        this.firstName = fn;
        this.lastName = ln;
        this.employeeId = -1;
        this.userName = employeeCode;
        passWord = Encrypt(pasword);

        Console.WriteLine("This is the encrypted password");
        Console.WriteLine(""+ passWord + "");
        Console.WriteLine("This is the unencrypted password after encryption");
        Console.WriteLine(Decrypt(passWord));
	}
    // This functions encrypts the password
    public static string Encrypt(string clearText)
    {
        string EncryptionKey = "abc123";
        byte[] clearBytes = Encoding.Unicode.GetBytes(clearText);
        using (Aes encryptor = Aes.Create())
        {
            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 });
            encryptor.Key = pdb.GetBytes(32);
            encryptor.IV = pdb.GetBytes(16);
            using (MemoryStream ms = new MemoryStream())
            {
                using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateEncryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(clearBytes, 0, clearBytes.Length);
                    cs.Close();
                }
                clearText = Convert.ToBase64String(ms.ToArray());
            }
        }
        return clearText;
    }
    // This function takes the encrypted passwords and converts them to a string
    // Use this to test the encryption function
    public static string Decrypt(string cipherText)
    {
        string EncryptionKey = "abc123";
        cipherText = cipherText.Replace(" ", "+");
        byte[] cipherBytes = Convert.FromBase64String(cipherText);
        using (Aes encryptor = Aes.Create())
        {
            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, new byte[] { 0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76 });
            encryptor.Key = pdb.GetBytes(32);
            encryptor.IV = pdb.GetBytes(16);
            using (MemoryStream ms = new MemoryStream())
            {
                using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateDecryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(cipherBytes, 0, cipherBytes.Length);
                    cs.Close();
                }
                cipherText = Encoding.Unicode.GetString(ms.ToArray());
            }
        }
        return cipherText;
    }

    // just use to check data
    public void Print()
	{
        Console.WriteLine(firstName);
        Console.WriteLine(lastName);
        Console.WriteLine(employeeId);
        Console.WriteLine(userName);
        Console.WriteLine(passWord);
    }
    // toString to print out objects fields
    public override string ToString()
    {
        string printString;
        printString = "" + firstName + " " + lastName + " " + employeeId + " " + userName + " " + passWord;
        return printString; 
    }

    public virtual void verifyPassword(string passWd)
	{
		throw new System.NotImplementedException();
	}
    // add employee to data base
    public virtual void addEmployeeToDB()
    {
        using (SqlConnection conn = new SqlConnection())
        {
            conn.ConnectionString = DBConnection.CONNECTION_STRING;
            conn.Open();

            string sql;

            if (employeeId == -1)
            {
                //Employee (names in DB  )      Values(names in DB) 
                sql = "INSERT INTO Employee(first_name,last_name,username,encrypted_password) VALUES(@first_name,@last_name,@username,@encrypted_password)"
                    + "SELECT CAST (scope_identity() as int)";
            }
            else
            {
                // sql = "UPDATE Employee set Status_Text = @Status_Text where OrderStatus_Id = @OrderStatus_Id";
                 sql = "UPDATE Employee set first_name = @first_name where employee_id = @employeeId";

            }

            SqlCommand command = new SqlCommand(sql, conn);
            command.Parameters.AddWithValue("first_name", firstName);
            command.Parameters.AddWithValue("last_name", lastName);
            command.Parameters.AddWithValue("username", userName);
            command.Parameters.AddWithValue("encrypted_password", passWord);

            if (employeeId == -1)
            {
                employeeId = (int)command.ExecuteScalar();
            }


        }
    }

}

